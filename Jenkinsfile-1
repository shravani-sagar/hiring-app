pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'sonarqube' // Jenkins -> Manage Jenkins -> Configure -> SonarQube
        NEXUS_REPO = 'maven-releases'
        SLACK_CHANNEL = '#build-notifications'
    }

    tools {
        jdk 'jdk21'
        maven 'Maven_3.9.4'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/shravani-sagar/hiring-app.git', branch: 'main'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh 'mvn clean verify sonar:sonar'
                }
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: 'http://<NEXUS_IP>:8081',
                    groupId: 'com.hiringapp',
                    version: '1.0',
                    repository: "${NEXUS_REPO}",
                    credentialsId: 'nexus-creds-id',
                    artifacts: [[
                        artifactId: 'hiring-app',
                        classifier: '',
                        file: 'target/hiring-app.war',
                        type: 'war'
                    ]]
                )
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'TomcatServer',
                            transfers: [
                                sshTransfer(
                                    sourceFiles: 'target/hiring-app.war',
                                    remoteDirectory: '/opt/tomcat/webapps',
                                    removePrefix: 'target',
                                    execCommand: 'sudo systemctl restart tomcat'
                                )
                            ],
                            usePromotionTimestamp: false,
                            verbose: true
                        )
                    ]
                )
            }
        }
    }

    post {
        success {
            slackSend(channel: "${SLACK_CHANNEL}", message: "✅ Build & Deployment Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            slackSend(channel: "${SLACK_CHANNEL}", message: "❌ Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}
