pipeline {
    agent any

    environment {
        MAVEN_HOME = tool 'Maven_3.9.4'
        JAVA_HOME = tool 'jdk 21'
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${env.PATH}"
        SONAR_SCANNER_HOME = "/opt/sonar-scanner"
        SONAR_HOST_URL = "http://3.94.54.123:9000"
        SONAR_LOGIN = credentials('sonar-token')
        NEXUS_URL = "http://13.221.78.204:8081:8082/repository/maven-snapshot05/"
        NEXUS_CREDENTIAL_ID = "nexus-creds"
        TOMCAT_HOST = "http://3.93.188.200:8080"
        TOMCAT_USER = "admin"
        TOMCAT_PASS = "admin"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/shravani-sagar/hiring-app.git'
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('MySonar') {
                    sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=hiring-app -Dsonar.sources=src -Dsonar.java.binaries=target"
                }
            }
        }

        stage('Maven Build') {
            steps {
                sh "mvn clean package"
            }
        }

        stage('Upload to Nexus') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '<NEXUS-IP>:8082',
                    groupId: 'com.hiringapp',
                    version: '1.0',
                    repository: 'maven-snapshot05',
                    credentialsId: "${NEXUS_CREDENTIAL_ID}",
                    artifacts: [
                        [artifactId: 'hiring-app', classifier: '', file: 'target/hiring-app.war', type: 'war']
                    ]
                )
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                script {
                    sh """
                    curl -u ${TOMCAT_USER}:${TOMCAT_PASS} --upload-file target/hiring-app.war ${TOMCAT_HOST}/manager/text/deploy?path=/hiring-app&update=true
                    """
                }
            }
        }

        stage('Slack Notification') {
            steps {
                slackSend(channel: '#ci-cd', message: "Build & Deployment of hiring-app completed successfully.",
                tokenCredentialId: 'slack-token'
            )
                
}
        }
    }

    post {
        failure {
            slackSend(channel: '#ci-cd', message: "Build FAILED for hiring-app!",
            tokenCredentialId: 'slack-token'
        )
        }
    }
}
